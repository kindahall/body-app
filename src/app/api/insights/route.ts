import { logger } from '@/lib/logger'
import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { validateData, RelationshipSchema, sanitizeString } from '@/lib/validation'

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

interface AnalysisData {
  relationships: any[]
  wishlistItems: any[]
  mirrorData: any
  userAge?: number
  previousAnalyses?: Array<{
    title: string
    date: string
    analysis: string
    tags: string[]
  }>
}

export async function POST(request: NextRequest) {
  try {
    // V√©rifier si la cl√© API est charg√©e
    if (!process.env.OPENAI_API_KEY) {
      logger.error('La variable d\'environnement OPENAI_API_KEY n\'est pas d√©finie.');
      throw new Error('La cl√© API OpenAI n\'est pas configur√©e sur le serveur.');
    }

    // R√©cup√©rer les donn√©es depuis le body
    const body = await request.json()
    const { relationships, wishlistItems, mirrorData, userAge, previousAnalyses } = body as AnalysisData

    // Construire le prompt pour OpenAI
    const prompt = buildAnalysisPrompt({ relationships, wishlistItems, mirrorData, userAge, previousAnalyses })

    // Appeler OpenAI
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "Tu es un coach de vie et psychologue expert qui analyse les donn√©es personnelles pour fournir des insights constructifs et bienveillants. R√©ponds toujours en fran√ßais et sois empathique. Utilise un format markdown avec des sections claires."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 2000,
      temperature: 0.7,
    })

    const analysis = completion.choices[0]?.message?.content

    if (!analysis) {
      throw new Error('Aucune analyse g√©n√©r√©e')
    }

    return NextResponse.json({ 
      analysis,
      success: true 
    })

  } catch (error: any) {
    logger.error('--- ERREUR D√âTAILL√âE DE L\'API INSIGHTS ---');
    
    // Sp√©cifiquement pour les erreurs de l'API OpenAI
    if (error.constructor.name === 'APIError' || error instanceof OpenAI.APIError) {
      logger.error('Status:', error.status);
      logger.error('Type:', error.type);
      logger.error('Code:', error.code);
      logger.error('Message:', error.message);
      return NextResponse.json(
        { error: 'Erreur de l\'API OpenAI', details: `[${error.code}] ${error.message}` },
        { status: error.status || 500 }
      );
    }
    
    // Pour toutes les autres erreurs
    logger.error('Message d\'erreur:', error.message);
    
    return NextResponse.json(
      { error: 'Erreur interne du serveur', details: error.message },
      { status: 500 }
    );
  }
}

function buildAnalysisPrompt(data: AnalysisData): string {
  const { relationships, wishlistItems, mirrorData, userAge, previousAnalyses } = data

  let prompt = `Analyse ces donn√©es personnelles et fournis une analyse psychologique bienveillante et constructive:\n\n`

  // Informations d√©mographiques
  if (userAge) {
    prompt += `**PROFIL UTILISATEUR:**\n`
    prompt += `√Çge: ${userAge} ans\n`
    
    // Ajouter des informations sur la tranche d'√¢ge pour contextualiser
    let ageGroup = ''
    if (userAge >= 18 && userAge <= 25) {
      ageGroup = 'Jeune adulte (18-25 ans) - P√©riode de d√©couverte et d\'exploration'
    } else if (userAge >= 26 && userAge <= 35) {
      ageGroup = 'Adulte √©tabli (26-35 ans) - P√©riode de stabilisation et de construction'
    } else if (userAge >= 36 && userAge <= 45) {
      ageGroup = 'Adulte mature (36-45 ans) - P√©riode d\'√©quilibre et de r√©alisation'
    } else if (userAge >= 46 && userAge <= 55) {
      ageGroup = 'Adulte exp√©riment√© (46-55 ans) - P√©riode de sagesse et de transmission'
    } else if (userAge >= 56 && userAge <= 65) {
      ageGroup = 'Pr√©-senior (56-65 ans) - P√©riode de transition et de bilan'
    } else if (userAge >= 66) {
      ageGroup = 'Senior (66+ ans) - P√©riode de s√©r√©nit√© et de partage'
    }
    
    prompt += `Tranche d'√¢ge: ${ageGroup}\n\n`
  }

  // Relations
  if (relationships && relationships.length > 0) {
    prompt += `**RELATIONS (${relationships.length} relations):**\n`
    relationships.forEach((rel, index) => {
      prompt += `- Relation ${index + 1}: Type: ${rel.type}, Note: ${rel.rating || 'N/A'}/10, Dur√©e: ${rel.duration || 'N/A'}, Lieu: ${rel.location || 'N/A'}, Sentiments: ${rel.feelings || 'N/A'}\n`
    })
    prompt += `\n`
  }

  // Wishlist
  if (wishlistItems && wishlistItems.length > 0) {
    prompt += `**SOUHAITS ET OBJECTIFS (${wishlistItems.length} items):**\n`
    wishlistItems.forEach((item, index) => {
      prompt += `- ${item.title} (Cat√©gorie: ${item.category}, Priorit√©: ${item.priority}, Compl√©t√©: ${item.is_completed ? 'Oui' : 'Non'})\n`
    })
    prompt += `\n`
  }

  // Donn√©es du miroir (auto-r√©flexion)
  if (mirrorData) {
    prompt += `**AUTO-R√âFLEXION:**\n`
    if (mirrorData.self && mirrorData.self.length > 0) {
      prompt += `D√©fauts accept√©s: ${mirrorData.self.join(', ')}\n`
    }
    if (mirrorData.others && mirrorData.others.length > 0) {
      prompt += `Ce que les autres pensent: ${mirrorData.others.join(', ')}\n`
    }
    if (mirrorData.growth && mirrorData.growth.length > 0) {
      prompt += `Axes de d√©veloppement: ${mirrorData.growth.join(', ')}\n`
    }
    if (mirrorData.confidenceLevel) {
      prompt += `Niveau de confiance: ${mirrorData.confidenceLevel}/10\n`
    }
    prompt += `\n`
  }

  // Analyses pr√©c√©dentes pour le contexte
  if (previousAnalyses && previousAnalyses.length > 0) {
    prompt += `**ANALYSES PR√âC√âDENTES (pour contexte et √©volution):**\n`
    previousAnalyses.forEach((analysis, index) => {
      prompt += `- ${analysis.title} (${new Date(analysis.date).toLocaleDateString('fr-FR')}): ${analysis.analysis.substring(0, 200)}...\n`
      if (analysis.tags.length > 0) {
        prompt += `  Tags: ${analysis.tags.join(', ')}\n`
      }
    })
    prompt += `\n`
  }

  prompt += `**ANALYSE DEMAND√âE:**

Fournis une analyse structur√©e avec ces sections en markdown :

## üîç Patterns et Tendances
Identifie les patterns principaux dans les relations et comportements

## üí™ Forces et Qualit√©s  
Souligne les points positifs et forces de caract√®re

## üéØ Axes d'Am√©lioration
Suggestions constructives pour le d√©veloppement personnel

## üìã Recommandations Pratiques
3-4 actions concr√®tes √† mettre en place

## üåü Vision d'Ensemble
Une synth√®se bienveillante du profil psychologique

${previousAnalyses && previousAnalyses.length > 0 ? 
'## üìà √âvolution et Progr√®s\nCompare avec les analyses pr√©c√©dentes et note les √©volutions positives\n\n' : ''}

Sois positif, constructif et √©vite tout jugement. L'objectif est d'aider la personne √† mieux se comprendre et grandir. Utilise un ton empathique et professionnel.${previousAnalyses && previousAnalyses.length > 0 ? ' Prends en compte l\'√©volution par rapport aux analyses pr√©c√©dentes.' : ''}

${userAge ? `**IMPORTANT**: Calibre tes recommandations selon l'√¢ge de la personne (${userAge} ans). Adapte tes conseils aux d√©fis, opportunit√©s et priorit√©s typiques de cette tranche d'√¢ge. Les attentes et contextes de vie varient significativement selon l'√¢ge.` : ''}`

  return prompt
} 