#!/usr/bin/env node

/**
 * Script d'installation compl√®te du crit√®re √¢ge
 * 
 * Ce script :
 * 1. V√©rifie que tous les fichiers sont en place
 * 2. Affiche les instructions pour la base de donn√©es
 * 3. Teste la compilation
 * 4. G√©n√®re un rapport d'installation
 */

const fs = require('fs')
const { execSync } = require('child_process')

console.log('üéØ Installation compl√®te du crit√®re √¢ge pour BodyCount\n')

// V√©rifications des fichiers
const requiredFiles = [
  'add-age-field.sql',
  'src/components/AgeInput.tsx',
  'GUIDE_AGE.md'
]

console.log('üìã V√©rification des fichiers...')
let allFilesPresent = true

requiredFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file}`)
  } else {
    console.log(`‚ùå ${file} - MANQUANT`)
    allFilesPresent = false
  }
})

if (!allFilesPresent) {
  console.log('\n‚ùå Certains fichiers sont manquants. Ex√©cutez d\'abord :')
  console.log('node scripts/add-age-feature.js')
  process.exit(1)
}

// V√©rification des modifications dans les fichiers existants
console.log('\nüîç V√©rification des modifications...')

// V√©rifier l'API insights
const apiInsightsPath = 'src/app/api/insights/route.ts'
if (fs.existsSync(apiInsightsPath)) {
  const apiContent = fs.readFileSync(apiInsightsPath, 'utf8')
  if (apiContent.includes('userAge?:') && apiContent.includes('PROFIL UTILISATEUR')) {
    console.log('‚úÖ API insights mise √† jour')
  } else {
    console.log('‚ö†Ô∏è  API insights - mise √† jour partielle')
  }
}

// V√©rifier le hook useAIInsights
const hookPath = 'src/hooks/useAIInsights.ts'
if (fs.existsSync(hookPath)) {
  const hookContent = fs.readFileSync(hookPath, 'utf8')
  if (hookContent.includes('userAge?:')) {
    console.log('‚úÖ Hook useAIInsights mis √† jour')
  } else {
    console.log('‚ö†Ô∏è  Hook useAIInsights - mise √† jour n√©cessaire')
  }
}

// V√©rifier la page insights
const insightsPagePath = 'src/app/insights/page.tsx'
if (fs.existsSync(insightsPagePath)) {
  const insightsContent = fs.readFileSync(insightsPagePath, 'utf8')
  if (insightsContent.includes('fetchUserAge') && insightsContent.includes('userAge,')) {
    console.log('‚úÖ Page insights mise √† jour')
  } else {
    console.log('‚ö†Ô∏è  Page insights - mise √† jour n√©cessaire')
  }
}

// V√©rifier la page settings
const settingsPagePath = 'src/app/settings/page.tsx'
if (fs.existsSync(settingsPagePath)) {
  const settingsContent = fs.readFileSync(settingsPagePath, 'utf8')
  if (settingsContent.includes('import AgeInput') && settingsContent.includes('<AgeInput')) {
    console.log('‚úÖ Page settings mise √† jour')
  } else {
    console.log('‚ö†Ô∏è  Page settings - mise √† jour n√©cessaire')
  }
}

// V√©rifier la validation
const validationPath = 'src/lib/validation.ts'
if (fs.existsSync(validationPath)) {
  const validationContent = fs.readFileSync(validationPath, 'utf8')
  if (validationContent.includes('age: z.number().int().min(18')) {
    console.log('‚úÖ Validation Zod mise √† jour')
  } else {
    console.log('‚ö†Ô∏è  Validation Zod - mise √† jour n√©cessaire')
  }
}

// Test de compilation
console.log('\nüî® Test de compilation...')
try {
  execSync('npm run build', { stdio: 'pipe' })
  console.log('‚úÖ Compilation r√©ussie')
} catch (error) {
  console.log('‚ö†Ô∏è  Erreurs de compilation d√©tect√©es')
  console.log('V√©rifiez les imports et la syntaxe')
}

// Instructions pour la base de donn√©es
console.log('\nüìä Instructions pour la base de donn√©es :')
console.log('1. Connectez-vous √† votre tableau de bord Supabase')
console.log('2. Allez dans SQL Editor')
console.log('3. Copiez et ex√©cutez le contenu du fichier add-age-field.sql')
console.log('4. V√©rifiez que la colonne "age" a √©t√© ajout√©e √† la table "profiles"')

// G√©n√©ration du rapport
const report = {
  timestamp: new Date().toISOString(),
  version: '1.0.0',
  status: 'installed',
  features: {
    database_schema: 'ready_for_migration',
    api_support: 'installed',
    ui_components: 'installed',
    validation: 'installed',
    age_groups: [
      '18-25 ans: Jeune adulte',
      '26-35 ans: Adulte √©tabli', 
      '36-45 ans: Adulte mature',
      '46-55 ans: Adulte exp√©riment√©',
      '56-65 ans: Pr√©-senior',
      '66+ ans: Senior'
    ]
  },
  next_steps: [
    'Ex√©cuter le script SQL dans Supabase',
    'Red√©marrer le serveur de d√©veloppement',
    'Tester la saisie d\'√¢ge dans Param√®tres',
    'G√©n√©rer une analyse IA pour v√©rifier la calibration'
  ]
}

fs.writeFileSync('age-feature-report.json', JSON.stringify(report, null, 2))

console.log('\nüéâ Installation du crit√®re √¢ge termin√©e !')
console.log('\nüìã Prochaines √©tapes :')
console.log('1. üìä Ex√©cutez le script SQL add-age-field.sql dans Supabase')
console.log('2. üîÑ Red√©marrez votre serveur : npm run dev')
console.log('3. ‚öôÔ∏è  Testez dans Param√®tres > Profil > √Çge')
console.log('4. ü§ñ G√©n√©rez une analyse IA pour voir la calibration')
console.log('\nüìñ Consultez GUIDE_AGE.md pour plus de d√©tails')
console.log('üìÑ Rapport g√©n√©r√© : age-feature-report.json')

// Afficher un r√©sum√© des tranches d'√¢ge
console.log('\nüéØ Tranches d\'√¢ge configur√©es :')
report.features.age_groups.forEach(group => {
  console.log(`   ‚Ä¢ ${group}`)
})

console.log('\n‚ú® Le crit√®re √¢ge permettra des analyses IA plus pr√©cises et personnalis√©es !') 